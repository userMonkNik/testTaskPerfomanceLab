/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package task3;

import com.google.gson.*;
import com.google.gson.stream.JsonWriter;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class Task3 {

    private static final Map<Long, String> valuesMap = new HashMap<>();
    private static final Gson gson = new Gson();

    public static void main(String[] args) {

        JsonElement jsonTests;
        JsonArray jsonValues;

        try (BufferedReader readerTests = new BufferedReader(new FileReader(args[0]));
             BufferedReader readerValues = new BufferedReader(new FileReader(args[1]))) {

            jsonTests = gson.fromJson(readerTests, JsonElement.class);
            jsonValues = gson.fromJson(readerValues, JsonElement.class)
                    .getAsJsonObject()
                    .get("values")
                    .getAsJsonArray();


        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        for (JsonElement jsonValueEntity : jsonValues) {
            JsonObject valueEntity = jsonValueEntity.getAsJsonObject();

            valuesMap.put(
                    valueEntity.get("id").getAsLong(),
                    valueEntity.get("value").getAsString()
            );
        }

        JsonArray jsonArray = jsonTests
                .getAsJsonObject()
                .get("tests")
                .getAsJsonArray();


        for (JsonElement jsonElement : jsonArray) {

            recursivelyAddValue(jsonElement);
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("report.json"));
             JsonWriter jsonReportWriter = gson.newJsonWriter(writer)) {

            gson.toJson(jsonTests, jsonReportWriter);

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static void recursivelyAddValue(JsonElement jsonElement) {

        JsonObject jsonObject = jsonElement.getAsJsonObject();
        long testId = jsonObject.get("id").getAsLong();

        if (valuesMap.containsKey(testId)) {

            jsonObject.addProperty("value", valuesMap.get(testId));
        }

        JsonElement jsonElementValuesArray = jsonObject.get("values");

        if (jsonElementValuesArray != null) {

            for (JsonElement jsonEntity : jsonElementValuesArray.getAsJsonArray()) {

                recursivelyAddValue(jsonEntity);
            }
        }
    }
}
